[{"/Users/wook/ProjectI/springboot2/src/main/frontend/src/index.js":"1","/Users/wook/ProjectI/springboot2/src/main/frontend/src/reportWebVitals.js":"2","/Users/wook/ProjectI/springboot2/src/main/frontend/src/App.js":"3","/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/Main.js":"4","/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/DocumentCreate.js":"5","/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/DocumentUpdate.js":"6"},{"size":499,"mtime":1606846932021,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1605875240414,"results":"9","hashOfConfig":"8"},{"size":241,"mtime":1605886942319,"results":"10","hashOfConfig":"8"},{"size":4579,"mtime":1607280765982,"results":"11","hashOfConfig":"8"},{"size":2984,"mtime":1605957025745,"results":"12","hashOfConfig":"8"},{"size":4339,"mtime":1606137420530,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"w2zqp",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/wook/ProjectI/springboot2/src/main/frontend/src/index.js",[],["29","30"],"/Users/wook/ProjectI/springboot2/src/main/frontend/src/reportWebVitals.js",[],"/Users/wook/ProjectI/springboot2/src/main/frontend/src/App.js",[],"/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/Main.js",["31"],"import React from 'react';\nimport {Button, Table} from 'react-bootstrap';\nimport axios from 'axios';\nimport DocumentCreate from './DocumentCreate';\nimport DocumentUpdate from './DocumentUpdate';\n\nclass Main extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            changeState : 'main',\n            documents : '',\n            selectId : '',\n            userName : '',\n            userEmail : ''\n        }\n\n        this.onChangeState = this.onChangeState.bind(this);\n    }\n\n    onChangeState = (status) => {\n        this.setState({ changeState : status});\n\n            axios.get(\"/main\")\n                .then( (res) => {\n                    this.setState({ documents : res.data.list});\n            });\n\n\n    }\n    onUpdateDocument = (selectId) => {\n        this.setState({ selectId : selectId, changeState : 'update'});\n    }\n\n\tcomponentDidMount(){\n\t\taxios.get(\"/main\")\n\t\t\t.then( (res) => {\n\t\t\t\tthis.setState({ documents : res.data.list});\n                if( res.data.user != undefined){\n                    this.setState({ userName : res.data.user.name,\n                                    userEmail : res.data.user.email});\n                }\n\t\t});\n\t}\n\n    render() {\n        return (\n            <div className=\"main\">\n                { this.state.changeState === 'main' &&\n                    <div>\n                        <Button type=\"button\" className=\"mb-2 document-input-page-btn\" onClick={(event) => {this.onChangeState('create')}}>\n                            글 등록\n                        </Button>\n                        {\n                        this.state.userName === '' ?\n                            <div>\n                                <a href=\"http://localhost:8080/oauth2/authorization/google\" role=\"button\">Google Login</a>\n                                <a href=\"http://localhost:8080/oauth2/authorization/naver\" role=\"button\">Naver Login</a>\n                            </div>\n                        :\n                            <div>\n                            <span>Logged in as : </span>\n                            <span id=\"user\">{this.state.userName}</span>\n                            <a href=\"http://localhost:8080/logout\" role=\"button\">Logout</a>\n                            </div>\n                        }\n                        <div className=\"document-main contents-main\">\n                            {\n                                this.state.documents.length === 0?\n                                        <div>문서가 존재하지 않습니다.</div>\n                                        :\n                                        <Table striped bordered hover size=\"sm\">\n                                            <thead>\n                                                <tr>\n                                                    <th>게시글 번호</th>\n                                                    <th>제목</th>\n                                                    <th>작성자</th>\n                                                    <th>최근 수정일</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                            {this.state.documents.map((document, index) => (\n                                                <tr key={document.id}>\n                                                    <td>{document.id}</td>\n                                                    <td onClick={(event) => this.onUpdateDocument(document.id)}>{document.title}</td>\n                                                    <td>{document.author}</td>\n                                                    <td>{document.modifiedDate}</td>\n                                                </tr>\n                                            ))}\n                                            </tbody>\n                                        </Table>\n                            }\n                        </div>\n                    </div>\n                }\n                {this.state.changeState === 'create' &&\n                    <div>\n                        <DocumentCreate onChangeState={this.onChangeState}/>\n                    </div>\n                }\n                {this.state.changeState === 'update' &&\n                    <div>\n                        <DocumentUpdate onChangeState={this.onChangeState} id={this.state.selectId} />\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Main;","/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/DocumentCreate.js",[],"/Users/wook/ProjectI/springboot2/src/main/frontend/src/script/DocumentUpdate.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":35,"nodeType":"40","messageId":"41","endLine":40,"endColumn":37},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["44"],["45"],"no-global-assign","no-unsafe-negation"]